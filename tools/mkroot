#!/usr/bin/python3

import argparse
import glob
import hashlib
import logging
import os
import os.path
import random
import shutil
import stat
import subprocess
import sys
import tarfile
import tempfile
import textwrap
import urllib.request
import zipfile
from typing import Any, Dict, List, Optional, Sequence, Set, Union

import apt

_CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))


class RemoteFile:
    """Represents a file that can be downloaded from the internet"""

    def __init__(self, url: str, sha1sum: str):
        self._path = os.path.join(_CURRENT_DIR, '.remote-file-cache', sha1sum)
        if not os.path.isfile(self._path):
            logging.warning('File for %s does not exist. Downloading...', url)
            self._download(url)
            return

        m = hashlib.sha1()
        with open(self._path, 'rb') as f:
            while True:
                buf = f.read(4096)
                if not buf:
                    break
                m.update(buf)

        if m.hexdigest() != sha1sum:
            logging.warning(
                'Hash mismatch for %s. Expected %s got %s. '
                'Downloading...', url, sha1sum, m.hexdigest())
            self._download(url)

    def _download(self, url: str) -> None:
        os.makedirs(os.path.dirname(self._path), exist_ok=True)
        urllib.request.urlretrieve(url, self._path)

    @property
    def path(self) -> str:
        """Returns the local path of the remote file."""
        return self._path

    def __enter__(self) -> 'RemoteFile':
        return self

    def __exit__(self, *_: Any) -> None:
        pass


class FileResolver:
    """Class that enumerates all files installed by a certain Debian package.

    Can work both recursively and non-recursively.
    """

    def __init__(self, exclude_files: Optional[Sequence[str]] = None):
        self.apt_cache = apt.Cache()
        self.files: Dict[str, Set[str]] = {}
        if exclude_files is None:
            self.exclude_files = ['/usr/share']
        else:
            self.exclude_files = list(exclude_files)

    def package_exists(self, package_name: str) -> bool:
        """Returns whether a package exists in the cache."""
        return package_name in self.apt_cache

    def files_for(self,
                  package_names: Union[str, Sequence[str]],
                  exclude_packages: Optional[Sequence[str]] = None,
                  recursive: bool = True,
                  include: Optional[Sequence[str]] = None,
                  exclude_files: Optional[Sequence[str]] = None) -> Set[str]:
        """Returns the set of files that are owned by a set of packages.

        This includes any packages (transitively, if the `recursive` flag is
        set) required by any of the packages provided.
        """
        result: Set[str] = set()
        if isinstance(package_names, str):
            package_names = [package_names]
        if not exclude_packages:
            exclude_packages = []
        for name in package_names:
            result.update(
                self.__files_for(
                    name,
                    exclude_packages=exclude_packages,
                    recursive=recursive))
        excluded: Set[str] = set()
        if include:
            for f in result:
                if not any(f.startswith(x) for x in include):
                    excluded.add(f)
        if exclude_files:
            for f in result:
                if any(f.startswith(x) for x in exclude_files):
                    excluded.add(f)
        result.symmetric_difference_update(excluded)
        return result

    def __files_for(self,
                    name: str,
                    exclude_packages: Sequence[str],
                    recursive: bool,
                    identation: int = 1) -> Set[str]:
        if name in exclude_packages:
            return set()
        if name in self.files:
            return self.files[name]
        pkg = self.apt_cache[name]
        self.files[name] = set()
        for f in pkg.installed_files:
            if not f or any(f.startswith(x) for x in self.exclude_files):
                continue
            if not os.path.exists(f):
                continue
            st = os.lstat(f)
            if stat.S_ISDIR(st.st_mode):
                continue
            self.files[name].add(f)
        if recursive and pkg.installed:
            for or_dep in pkg.installed.get_dependencies('Depends'):
                for dep in or_dep:
                    dep_name = dep.name.split(':')[0]
                    if dep_name in exclude_packages:
                        continue
                    self.files[name].update(
                        self.__files_for(dep_name, exclude_packages, recursive,
                                         identation + 1))
                    break
        return self.files[name]


class Chroot:
    """Utilities to set up a chroot jail filesystem for omegajail.

    Files are hardlinked instead of copied when possible.
    """

    def __init__(self, path: str, mountpoint: str, link: bool = True):
        self.__link = link
        self.chroot = path
        self.mountpoint = mountpoint
        if not self.mountpoint.endswith('/'):
            self.mountpoint += '/'
        if os.path.exists(path):
            shutil.rmtree(path, True)
        os.makedirs(path)

    @property
    def path(self) -> str:
        return self.chroot

    def __chroot_path(self, path: str,
                      relative_to: Optional[str] = None) -> str:
        if relative_to is None:
            root = self.mountpoint
        else:
            root = relative_to
        assert path.startswith(
            root.rstrip('/')), '%s does not start with %s' % (path, root)
        return self.chroot + path[len(root) - 1:]

    def file_exists(self, path: str,
                    relative_to: Optional[str] = None) -> bool:
        """Returns whether a file exists in the chroot."""
        return os.path.lexists(self.__chroot_path(path, relative_to))

    def mkdir(self, path: str, relative_to: Optional[str] = None) -> None:
        """Creates a directory in the chroot."""
        path = os.path.join(
            self.chroot,
            os.path.relpath(
                self.__chroot_path(path, relative_to), self.chroot))
        if os.path.isdir(path):
            return
        os.makedirs(path, exist_ok=True)

    def touch(self, path: str, relative_to: Optional[str] = None) -> None:
        """Ensures that a file exists in the chroot."""
        self.mkdir(os.path.dirname(path), relative_to)
        path = os.path.join(
            self.chroot,
            os.path.relpath(
                self.__chroot_path(path, relative_to), self.chroot))
        if os.path.isfile(path):
            return
        with open(path, 'w'):
            pass

    def copyfromhost(self,
                     path: str,
                     relative_to: Optional[str] = None,
                     exclude: Sequence[str] = (),
                     recurse: bool = False) -> None:
        """Copies a file from the host in the same path."""
        if '*' in path:
            for p in glob.glob(path):
                self.copyfromhost(p, relative_to, exclude)
            return
        try:
            self.mkdir(os.path.dirname(path), relative_to)
        except AssertionError:
            # The roots might try to create their parent directory,
            # which will be outside the root.
            pass
        if not os.path.isdir(os.path.realpath(path)):
            self.install(path, os.path.realpath(path), relative_to)
            return
        if not recurse:
            self.mkdir(path, relative_to)
            return

        for root, dirs, files in os.walk(path):
            if any([root.startswith(e) for e in exclude]):
                continue
            self.mkdir(root, relative_to)
            for f in files:
                filepath = os.path.join(root, f)
                if os.path.islink(filepath):
                    target = os.readlink(filepath)
                    abspath = os.path.realpath(
                        os.path.join(os.path.dirname(filepath), target))
                    if abspath.startswith(self.mountpoint):
                        self.symlink(filepath, target)
                    else:
                        try:
                            self.install(filepath, abspath, relative_to)
                        except OSError:
                            logging.exception('failed to copy %s into %s',
                                              abspath, filepath)
                else:
                    self.install(filepath, os.path.realpath(filepath),
                                 relative_to)
            for d in dirs:
                dirpath = os.path.join(root, d)
                if os.path.islink(dirpath):
                    target = os.readlink(dirpath)
                    abspath = os.path.realpath(
                        os.path.join(os.path.dirname(dirpath), target))
                    if abspath.startswith(self.mountpoint):
                        self.symlink(dirpath, target)
                    else:
                        shutil.copytree(
                            abspath, self.__chroot_path(dirpath, relative_to))

    def install(self,
                path: str,
                source: str,
                relative_to: Optional[str] = None,
                mode: Optional[int] = None) -> None:
        """Installs a file from the host using the provided path."""
        try:
            self.mkdir(os.path.dirname(path), relative_to)
            while os.path.islink(source):
                source = os.path.join(
                    os.path.dirname(source), os.readlink(source))
            if os.path.isdir(source):
                self.mkdir(path, relative_to)
            elif self.__link:
                target = self.__chroot_path(path, relative_to)
                if os.path.isfile(target):
                    return
                if os.path.islink(target):
                    if os.path.readlink(target) != source:
                        raise ValueError('Target file %r points to %r, but it was expected to point to %r' % (target, os.path.readlink(target), source))
                    return
                os.link(source, target)
            else:
                shutil.copy(source, self.__chroot_path(path, relative_to))
            if mode is not None:
                os.chmod(self.__chroot_path(path, relative_to), mode)
        except Exception:
            logging.exception('failed to install %s into %s', source, path)
            raise

    def symlink(self, path: str, destination: str) -> None:
        """Creates a symlink in the chroot."""
        self.mkdir(os.path.dirname(path))
        target = self.__chroot_path(path)
        if os.path.islink(target):
            if os.path.readlink(target) != destination:
                raise ValueError('Target file %r points to %r, but it was expected to point to %r' % (target, os.path.readlink(target), destination))
            return
        if os.path.isfile(target):
            return
        try:
            os.symlink(destination, target)
        except Exception:
            logging.exception('failed to create the symlink %s pointing to %s',
                              path, destination)
            raise

    def mknod(self, path: str, mode: int = 0o600, device: int = 0) -> None:
        """Creates a node file in the chroot."""
        self.mkdir(os.path.dirname(path))
        try:
            os.mknod(self.__chroot_path(path), mode=mode, device=device)
            os.chmod(self.__chroot_path(path), mode & 0o777)
        except Exception:
            logging.exception('failed to mknod(%s, mode=%o, device=%d)', path,
                              mode, device)
            raise

    def write(self, path: str, contents: bytes) -> None:
        """Creates a file in the chroot with the specified contents."""
        self.mkdir(os.path.dirname(path))
        with open(self.__chroot_path(path), 'wb') as f:
            f.write(contents)
        os.utime(self.__chroot_path(path), (0, 0))

    def extract(self,
                url: str,
                sha1: str,
                skip_prefix: str = '',
                exclude: Sequence[str] = (),
                include: Optional[Sequence[str]] = None) -> None:
        """Extracts a remote file into the chroot."""
        remote_file = RemoteFile(url, sha1)
        with tarfile.open(remote_file.path) as tar:
            for member in tar.getmembers():
                path = os.path.normpath(member.name)
                if not path.startswith(skip_prefix):
                    continue
                path = self.mountpoint + path[len(skip_prefix):]
                if any([path.startswith(e) for e in exclude]):
                    continue
                if include is not None and path not in include:
                    continue
                if member.issym():
                    self.symlink(path, member.linkname)
                elif member.isfile():
                    self.mkdir(os.path.dirname(path))
                    with open(self.__chroot_path(path), 'wb') as dst:
                        shutil.copyfileobj(
                            tar.extractfile(member), dst, member.size)
                    os.chmod(self.__chroot_path(path), member.mode)

    # __enter__ and __exit__ are just provided to support with for clarity of code.
    def __enter__(self) -> 'Chroot':
        return self

    def __exit__(self, *_: Any) -> None:
        pass


def _main() -> None:
    parser = argparse.ArgumentParser(
        description='Build a chroot environment for omegajail')
    parser.add_argument(
        '--target',
        default='/var/lib/omegajail',
        help='The directory in which the chroot environment will '
        'be built')
    parser.add_argument(
        '--no-link',
        dest='link',
        action='store_false',
        help='Copy instead of linking files')
    parser.add_argument('command', nargs=argparse.REMAINDER)
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    resolver = FileResolver()

    ROOT_PACKAGES = [
        'ca-certificates',
        'libatomic1',
        'libc6',
        'libcap2',
        'libcrypt1',
        'libexpat1',
        'libffi7',
        'libgdbm-compat4',
        'libgdbm6',
        'libgmp10',
        'libicu66',
        'liblzma5',
        'libreadline8',
        'libssl1.1',
        'libstdc++6',
        'libtinfo6',
        'libunwind8',
        'libuuid1',
        'libyaml-0-2',
        'lua5.3',
        'zlib1g',
    ]

    COMPILER_PACKAGES = ROOT_PACKAGES + [
        'clang-10',
        'fp-compiler-3.0.4',
        'fp-units-fcl-3.0.4',
        'g++',
        'gcc',
        'libbsd-dev',
        'libc6-dev',
        'libffi-dev',
        'libgmp-dev',
        'libitm1',
        'libquadmath0',
        'libtsan0',
    ]

    RUBY_ROOT = '/usr/lib/ruby/'
    HASKELL_ROOT = '/usr/lib/ghc/'
    PYTHON2_ROOT = '/usr/lib/python2.7/'
    PYTHON3_ROOT = '/usr/lib/python3.8/'
    JAVA_ROOT = '/usr/lib/jvm/'
    DOTNET_ROOT = '/usr/share/dotnet/'
    JS_ROOT = '/opt/nodejs/'

    RUBY_FILES = resolver.files_for('ruby', exclude_packages=COMPILER_PACKAGES)
    PYTHON2_FILES = resolver.files_for(
        'python2.7', exclude_packages=COMPILER_PACKAGES)
    PYTHON3_FILES = resolver.files_for(
        'python3.8', exclude_packages=COMPILER_PACKAGES)
    HASKELL_FILES = resolver.files_for(
        'ghc', exclude_packages=COMPILER_PACKAGES + ['libncurses5-dev'])
    JAVA_FILES = resolver.files_for([
        'openjdk-14-jdk',
        'openjdk-14-jdk-headless',
        'openjdk-14-jre',
        'openjdk-14-jre-headless',
    ],
                                    recursive=False,
                                    exclude_files=['/etc'])
    # |resolver| excludes files from /usr/shared. All the dotnet files are in
    # that directory, so we need a new resolver that does not exclude those
    # files.
    raw_resolver = FileResolver(exclude_files=())
    DOTNET_FILES = raw_resolver.files_for([
        'dotnet-host',
        'dotnet-hostfxr-3.1',
        'dotnet-runtime-3.1',
        'dotnet-sdk-3.1',
    ],
                                          recursive=False)

    def install_common(root: Chroot) -> None:
        if not os.path.exists('/usr/lib/locale/locale-archive'):
            subprocess.check_call(
                ['/usr/sbin/locale-gen', '--purge', 'en_US.UTF-8'])
        root.copyfromhost('/usr/lib/locale/locale-archive')
        root.copyfromhost('/etc/localtime')

        root.write(
            '/etc/passwd', b'root:x:0:0:root:/:/bin/false\n'
            b'user:x:1000:1000:root:/home:/bin/false\n'
            b'nobody:x:65534:65534:nobody:/nonexistent:/bin/false')
        root.write('/etc/group', b'root:x:0:\n'
                   b'user:x:1000:\n'
                   b'nobody:x:65534:')

        # Mountpoints for libraries
        root.mkdir(RUBY_ROOT)
        root.mkdir(PYTHON2_ROOT)
        root.mkdir(PYTHON3_ROOT)
        root.mkdir(JAVA_ROOT)
        root.mkdir(HASKELL_ROOT)
        root.mkdir(DOTNET_ROOT)
        root.mkdir(JS_ROOT)

        # Other miscellaneous mountpoints
        root.mkdir('/dev/')
        root.mkdir('/proc/')
        root.mkdir('/home/')
        root.symlink('/dev/stdin', '/proc/self/fd/0')
        root.symlink('/dev/stdout', '/proc/self/fd/1')
        root.symlink('/dev/stderr', '/proc/self/fd/2')
        root.mkdir('/mnt/stdio')

        # Java wants to see which CPUs are online
        root.write('/sys/devices/system/cpu/online', b'0')

        # cgroups support
        root.mkdir('/sys/fs/cgroup/memory/omegajail')
        root.mkdir('/sys/fs/cgroup/pids/omegajail')

        # Node.js really wants a source of randomness.
        root.symlink('/dev/urandom', os.path.join(JS_ROOT, 'urandom'))

        # Device nodes
        root.mknod(
            '/dev/null', mode=0o666 | stat.S_IFCHR, device=os.makedev(1, 3))
        root.mknod(
            '/dev/zero', mode=0o666 | stat.S_IFCHR, device=os.makedev(1, 5))

        root.symlink('/usr/bin/java',
                     [x for x in JAVA_FILES if x.endswith('bin/java')][0])
        root.symlink('/usr/bin/python2.7', os.path.join(PYTHON2_ROOT, 'python2.7'))
        root.symlink('/usr/bin/python3', os.path.join(PYTHON3_ROOT, 'python3'))
        root.symlink('/usr/bin/node', os.path.join(JS_ROOT, 'bin/node'))
        root.symlink('/usr/lib/node_modules',
                     os.path.join(JS_ROOT, 'node_modules'))
        for f in RUBY_FILES:
            if f.startswith(RUBY_ROOT):
                continue
            root.symlink(f, os.path.join(RUBY_ROOT, f.replace('/', '_')))

    with Chroot(
            os.path.join(args.target, 'root'), '/', link=args.link) as root:
        install_common(root)

        for filename in resolver.files_for(ROOT_PACKAGES):
            root.copyfromhost(filename)

        # /tmp is an (optional) mountpoint in the normal chroot, and
        # will be left read-only for the programs that don't need it.
        root.mkdir('/tmp/')

        root.symlink('/usr/bin/lua', 'lua5.3')

    with Chroot(
            os.path.join(args.target, 'root-compilers'), '/',
            link=args.link) as root:
        install_common(root)

        for f in resolver.files_for(COMPILER_PACKAGES):
            if f in ('/lib', '/lib32', '/lib64', '/sbin', '/bin'):
                continue
            if os.path.islink(f):
                root.symlink(f, os.readlink(f))
            else:
                root.copyfromhost(f)

        root.copyfromhost('/usr/bin/fpc')
        root.copyfromhost('/etc/fpc.cfg')
        if os.path.exists('/usr/bin/ppcarm'):
            root.copyfromhost('/usr/bin/ppcarm')
        else:
            root.copyfromhost('/usr/bin/ppcx64')
        root.symlink('/usr/bin/javac',
                     [x for x in JAVA_FILES if x.endswith('bin/javac')][0])
        root.symlink('/usr/bin/jaotc',
                     [x for x in JAVA_FILES if x.endswith('bin/jaotc')][0])
        for f in HASKELL_FILES:
            if f.startswith(HASKELL_ROOT):
                continue
            if root.file_exists(f):
                continue
            root.symlink(f, os.path.join(HASKELL_ROOT, f.replace('/', '_')))
        root.mkdir('/tmp/')
        root.mkdir('/var/lib/omegajail/bin')

        root.symlink('/usr/bin/luac', 'luac5.3')

    with Chroot(
            os.path.join(args.target, 'root-openjdk'), JAVA_ROOT,
            link=args.link) as root:
        for filename in JAVA_FILES:
            if not filename.startswith(JAVA_ROOT):
                continue
            root.copyfromhost(filename)
        logging.info('Generating the Java Class Data Sharing bundle.')
        subprocess.check_call([
            '/usr/bin/java',
            '-Xshare:dump',
            f'-XX:SharedArchiveFile={root.path}/java-14-openjdk-amd64/lib/server/classes.jsa',
        ])
        logging.info('Precompiling critical methods from java.base.')
        subprocess.check_call([
            '/usr/bin/jaotc',
            '-J-Xshare:on',
            '-J-XX:+UseSerialGC',
            f'-J-XX:SharedArchiveFile={root.path}/java-14-openjdk-amd64/lib/server/classes.jsa',
            '--compile-commands',
            os.path.join(_CURRENT_DIR, 'java.base.aotcfg'),
            '--module',
            'java.base',
            '--output',
            f'{root.path}/java.base.so',
        ])
        logging.info('Done.')

    with Chroot(
            os.path.join(args.target, 'root-python2'), PYTHON2_ROOT,
            link=args.link) as root:
        root.install(
            os.path.join(PYTHON2_ROOT, 'python2.7'), '/usr/bin/python2.7')
        for filename in PYTHON2_FILES:
            if filename.startswith(PYTHON2_ROOT):
                root.copyfromhost(filename)

        with RemoteFile(
                'https://raw.githubusercontent.com/omegaup/libkarel/v0.0.99/libkarel.py',
                '9b67427877bb8ba5bbf3bbde9dcf828c81d3f2cd') as remote_file:
            root.install('/usr/lib/python2.7/libkarel.py', remote_file.path)

    with Chroot(
            os.path.join(args.target, 'root-python3'),
            PYTHON3_ROOT,
            link=args.link) as root:
        root.install(
            os.path.join(PYTHON3_ROOT, 'python3'), '/usr/bin/python3.8')
        for filename in PYTHON3_FILES:
            if filename.startswith(PYTHON3_ROOT):
                root.copyfromhost(filename)

        with RemoteFile(
                'https://files.pythonhosted.org/packages/97/20/a73731474363a3998d7b9097632be23ab17c4ad551aea4f1234fd964e524/libkarel-1.0.2-py3-none-any.whl',
                '1585263c50bf3956350fd617258b48ca05013776') as remote_file:
            with zipfile.ZipFile(remote_file.path) as z:
                z.extractall(os.path.join(PYTHON3_ROOT, 'dist-packages'))
        logging.info('Precompiling libkarel.')
        subprocess.check_call([
            '/usr/bin/python3',
            '-m',
            'py_compile',
            os.path.join(PYTHON3_ROOT, 'dist-packages/libkarel/__init__.py'),
            os.path.join(PYTHON3_ROOT, 'dist-packages/libkarel/libkarel.py'),
            os.path.join(PYTHON3_ROOT, 'dist-packages/libkarel/kareltest.py'),
        ])
        root.copyfromhost(os.path.join(PYTHON3_ROOT, 'dist-packages/libkarel'))
        root.copyfromhost(
            os.path.join(PYTHON3_ROOT,
                         'dist-packages/libkarel-1.0.2.dist-info'))
        logging.info('Done.')

    with Chroot(
            os.path.join(args.target, 'root-ruby'), RUBY_ROOT,
            link=args.link) as root:
        root.install(os.path.join(RUBY_ROOT, 'ruby'), '/usr/bin/ruby')
        for filename in RUBY_FILES:
            if filename.startswith(RUBY_ROOT):
                root.copyfromhost(filename)
        for f in RUBY_FILES:
            if f.startswith(RUBY_ROOT):
                continue
            root.install(os.path.join(RUBY_ROOT, f.replace('/', '_')), f)

    with Chroot(
            os.path.join(args.target, 'root-hs'), HASKELL_ROOT,
            link=args.link) as root:
        for filename in HASKELL_FILES:
            if filename.startswith(HASKELL_ROOT):
                root.copyfromhost(filename)
        for f in HASKELL_FILES:
            if f.startswith(HASKELL_ROOT):
                continue
            root.install(os.path.join(HASKELL_ROOT, f.replace('/', '_')), f)
        root.copyfromhost(
            '/usr/lib/ghc/package.conf.d',
            relative_to=HASKELL_ROOT,
            recurse=True)

    with Chroot(
            os.path.join(args.target, 'root-dotnet'), DOTNET_ROOT,
            link=args.link) as root:
        for filename in DOTNET_FILES:
            if filename.startswith(DOTNET_ROOT):
                root.copyfromhost(filename)
        root.copyfromhost(
            '/usr/share/dotnet/packs',
            relative_to=DOTNET_ROOT,
            recurse=True)
        root.install(
            os.path.join(DOTNET_ROOT, 'Main.runtimeconfig.json'),
            os.path.join(_CURRENT_DIR, 'Main.runtimeconfig.json'))
        root.install(
            os.path.join(DOTNET_ROOT, 'Release.rsp'),
            os.path.join(_CURRENT_DIR, 'Release.rsp'))

    with Chroot(os.path.join(args.target, 'root-js'), JS_ROOT,
                link=args.link) as root:
        root.extract(
            'https://nodejs.org/dist/v12.17.0/node-v12.17.0-linux-x64.tar.xz',
            '1b1c3dc8dea5c2bb40464149eeee87f407b1cfec',
            skip_prefix='node-v12.17.0-linux-x64/',
            include=[
                os.path.join(JS_ROOT, 'LICENSE'),
                os.path.join(JS_ROOT, 'bin/node')
            ])
        with RemoteFile(
                'https://github.com/omegaup/karel.js/releases/download/v0.2.1/karel',
                '6c9e6ffb7b9ec7c4dd107974cb3fab1b531428f0') as remote_file:
            root.install(
                os.path.join(JS_ROOT, 'karel.wasm'), remote_file.path, mode=0o755)
        with RemoteFile(
                'https://github.com/omegaup/karel.js/releases/download/v0.2.1/karel.js',
                'e5aecd4a305aaaf810df6b5d038d2535fd52d857') as remote_file:
            root.install(os.path.join(JS_ROOT, 'karel.js'), remote_file.path)

        random.seed(b'\u03A9\u1F512')  # Ω🔒
        root.write(
            os.path.join(JS_ROOT, 'urandom'),
            bytes(random.randint(0, 255) for _ in range(4096)))


if __name__ == '__main__':
    _main()
