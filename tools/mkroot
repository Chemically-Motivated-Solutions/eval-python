#!/usr/bin/python3

import apt
import argparse
import glob
import hashlib
import logging
import os
import os.path
import platform
import random
import shutil
import stat
import subprocess
import sys
import tarfile
import urllib.request, urllib.parse, urllib.error

_CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))

class RemoteFile:
  def __init__(self, url, sha1sum):
    self._path = os.path.join(_CURRENT_DIR, '.remote-file-cache', sha1sum)
    if not os.path.isfile(self._path):
      logging.warning('File for %s does not exist. Downloading...', url)
      self._download(url)
      return

    m = hashlib.sha1()
    with open(self._path, 'rb') as f:
      while True:
        buf = f.read(4096)
        if not buf:
          break
        m.update(buf)

    if m.hexdigest() != sha1sum:
      logging.warning('Hash mismatch for %s. Expected %s got %s. '
                      'Downloading...', url, sha1sum, m.hexdigest())
      self._download(url)

  def _download(self, url):
    os.makedirs(os.path.dirname(self._path), exist_ok=True)
    urllib.request.urlretrieve(url, self._path)

  @property
  def path(self):
    return self._path

  def __enter__(self):
    return self

  def __exit__(self, *_):
    return self

# Class that enumerates all files installed by a certain Debian package.
# Can work both recursively and non-recursively.
class FileResolver:
  def __init__(self, exclude_files=None):
    self.apt_cache = apt.Cache()
    self.files = {}
    if exclude_files is None:
      self.exclude_files = ['/usr/share']
    else:
      self.exclude_files = exclude_files[:]

  def package_exists(self, package_name):
    return package_name in self.apt_cache

  def files_for(self, package_names, exclude_packages=None, recursive=True,
      include=None, exclude_files=None):
    result = set()
    if isinstance(package_names, str):
      package_names = [package_names]
    if not exclude_packages:
      exclude_packages = []
    for name in package_names:
      result.update(self.__files_for(name, exclude_packages=exclude_packages,
        recursive=recursive))
    excluded = set()
    if include:
      for f in result:
        if not any(f.startswith(x) for x in include):
          excluded.add(f)
    if exclude_files:
      for f in result:
        if any(f.startswith(x) for x in exclude_files):
          excluded.add(f)
    result.symmetric_difference_update(excluded)
    return result

  def __files_for(self, name, exclude_packages, recursive, identation=1):
    if name in exclude_packages:
      return set()
    if name in self.files:
      return self.files[name]
    pkg = self.apt_cache[name]
    self.files[name] = set()
    for f in pkg.installed_files:
      if not f or any(f.startswith(x) for x in self.exclude_files): continue
      if not os.path.exists(f): continue
      st = os.lstat(f)
      if stat.S_ISDIR(st.st_mode): continue
      self.files[name].add(f)
    if recursive and pkg.installed:
      for or_dep in pkg.installed.get_dependencies('Depends'):
        for dep in or_dep:
          self.files[name].update(self.__files_for(dep.name, exclude_packages,
            recursive, identation + 1))
          break
    return self.files[name]

# Utilities to set up a chroot jail filesystem for omegajail.  Files are
# hardlinked instead of copied when possible.
class Chroot:
  def __init__(self, path, mountpoint, link=True):
    self.__link = link
    self.chroot = path
    self.mountpoint = mountpoint
    if not self.mountpoint.endswith('/'):
      self.mountpoint += '/'
    if os.path.exists(path):
      shutil.rmtree(path, True)
    os.makedirs(path)

  def __chroot_path(self, path, relative_to=None):
    root = relative_to
    if root is None:
      root = self.mountpoint
    assert path.startswith(root.rstrip('/')), '%s does not start with %s' % (path, root)
    return self.chroot + path[len(root)-1:]

  def file_exists(self, path, relative_to=None):
    return os.path.lexists(self.__chroot_path(path, relative_to))

  def mkdir(self, path, relative_to=None):
    path = os.path.join(self.chroot, os.path.relpath(self.__chroot_path(path, relative_to),
      self.chroot))
    if not os.path.isdir(path):
        os.makedirs(path)

  def touch(self, path, relative_to=None):
    self.mkdir(os.path.dirname(path), relative_to)
    path = os.path.join(self.chroot, os.path.relpath(self.__chroot_path(path, relative_to),
      self.chroot))
    if not os.path.isfile(path):
        with open(path, 'w') as f:
            pass

  def copyfromhost(self, path, relative_to=None, exclude=[]):
    if '*' in path:
      for p in glob.glob(path):
        self.copyfromhost(p, relative_to, exclude)
      return
    try:
      self.mkdir(os.path.dirname(path), relative_to)
    except AssertionError:
      # The roots might try to create their parent directory,
      # which will be outside the root.
      pass
    if os.path.isdir(os.path.realpath(path)):
      for root, dirs, files in os.walk(path):
        if any([root.startswith(e) for e in exclude]): continue
        self.mkdir(root, relative_to)
        for f in files:
          filepath = os.path.join(root, f)
          if os.path.islink(filepath):
            target = os.readlink(filepath)
            abspath = os.path.realpath(os.path.join(os.path.dirname(filepath), target))
            if abspath.startswith(self.mountpoint):
              self.symlink(filepath, target)
            else:
              try:
                self.install(filepath, abspath, relative_to)
              except OSError as e:
                print(e, abspath, filepath)
          else:
            self.install(filepath, os.path.realpath(filepath), relative_to)
        for d in dirs:
          dirpath = os.path.join(root, d)
          if os.path.islink(dirpath):
            target = os.readlink(dirpath)
            abspath = os.path.realpath(os.path.join(os.path.dirname(dirpath), target))
            if abspath.startswith(self.mountpoint):
              self.symlink(dirpath, target)
            else:
              shutil.copytree(abspath, self.__chroot_path(dirpath, relative_to))
    else:
      self.install(path, os.path.realpath(path), relative_to)

  def install(self, path, source, relative_to=None):
    try:
      self.mkdir(os.path.dirname(path), relative_to)
      while os.path.islink(source):
        source = os.path.join(os.path.dirname(source),
          os.readlink(source))
      if os.path.isdir(source):
        self.mkdir(path, relative_to)
      elif self.__link:
        os.link(source, self.__chroot_path(path, relative_to))
      else:
        shutil.copy(source, self.__chroot_path(path, relative_to))
    except Exception as e:
      print(path, source, file=sys.stderr)
      raise e

  def symlink(self, path, destination):
    self.mkdir(os.path.dirname(path))
    try:
      os.symlink(destination, self.__chroot_path(path))
    except Exception as e:
      print(path, destination, file=sys.stderr)
      raise e

  def mknod(self, path, mode=0o600, device=0, *, dir_fd=None):
    self.mkdir(os.path.dirname(path))
    try:
      os.mknod(self.__chroot_path(path), mode=mode, device=device, dir_fd=dir_fd)
      os.chmod(self.__chroot_path(path), mode&0o777)
    except Exception as e:
      print(path, destination, file=sys.stderr)
      raise e

  def write(self, path, contents):
    self.mkdir(os.path.dirname(path))
    with open(self.__chroot_path(path), 'wb') as f:
      f.write(contents)
    os.utime(self.__chroot_path(path), (0, 0))

  def extract(self, url, sha1, skip_prefix='', exclude=[], include=None):
    f = RemoteFile(url, sha1)
    with tarfile.open(f.path) as tar:
      for member in tar.getmembers():
        path = os.path.normpath(member.name)
        if not path.startswith(skip_prefix): continue
        path = self.mountpoint + path[len(skip_prefix):]
        if any([path.startswith(e) for e in exclude]): continue
        if include is not None and path not in include: continue
        if member.issym():
          self.symlink(path, member.linkname)
        elif member.isfile():
          self.mkdir(os.path.dirname(path))
          with open(self.__chroot_path(path), 'wb') as dst:
            shutil.copyfileobj(tar.extractfile(member), dst, member.size)
          os.chmod(self.__chroot_path(path), member.mode)

  # __enter__ and __exit__ are just provided to support with for clarity of code.
  def __enter__(self):
    return self

  def __exit__(self, type, value, traceback):
    pass

def main(args):
  resolver = FileResolver()

  ROOT_PACKAGES = ['libc6', 'libcap2', 'libexpat1','libtinfo5', 'zlib1g',
      'libffi6', 'libgmp10', 'libstdc++6', 'libreadline6', 'libssl1.0.0',
      'libyaml-0-2', 'libgdbm3', 'ca-certificates', 'lua5.2', 'libicu55',
      'libuuid1', 'liblzma5', 'libunwind8']
  OPTIONAL_ROOT_PACKAGES = []
  for package_name in OPTIONAL_ROOT_PACKAGES:
    if resolver.package_exists(package_name):
       ROOT_PACKAGES.append(package_name)

  COMPILER_PACKAGES = ROOT_PACKAGES + ['g++', 'gcc', 'libc6-dev', 'libgmp-dev',
      'libbsd-dev', 'fp-compiler', 'fp-units-fcl', 'libgfortran3', 'libffi-dev',
      'binutils']
  OPTIONAL_COMPILER_PACKAGES = ['libitm1', 'libquadmath0', 'libtsan0']
  for package_name in OPTIONAL_COMPILER_PACKAGES:
    if resolver.package_exists(package_name):
       COMPILER_PACKAGES.append(package_name)

  RUBY_ROOT = '/usr/lib/ruby/'
  HASKELL_ROOT = '/usr/lib/ghc/'
  PYTHON_ROOT = '/usr/lib/python2.7/'
  JAVA_ROOT = '/usr/lib/jvm/'
  DOTNET_ROOT = '/usr/share/dotnet/'
  JS_ROOT = '/opt/nodejs/'

  RUBY_FILES = resolver.files_for('ruby', exclude_packages=COMPILER_PACKAGES)
  PYTHON_FILES = resolver.files_for('python2.7')
  HASKELL_FILES = resolver.files_for('ghc', exclude_packages=COMPILER_PACKAGES)
  JAVA_FILES = resolver.files_for(['openjdk-8-jdk', 'openjdk-8-jre',
      'openjdk-8-jre-headless', 'openjdk-8-jdk-headless'], recursive=False, exclude_files=['/etc'])
  # |resolver| excludes files from /usr/shared. All the dotnet files are in
  # that directory, so we need a new resolver that does not exclude those
  # files.
  raw_resolver = FileResolver(exclude_files=())
  DOTNET_FILES = raw_resolver.files_for(['dotnet-host', 'dotnet-hostfxr-2.0.0',
      'dotnet-runtime-2.0.0', 'dotnet-sdk-2.0.0'], recursive=False)

  def install_common(root):
    if not os.path.exists('/usr/lib/locale/locale-archive'):
      subprocess.check_call(['/usr/sbin/locale-gen', '--purge', 'en_US.UTF-8'])
    root.copyfromhost('/usr/lib/locale/locale-archive')
    root.copyfromhost('/etc/localtime')

    root.write('/etc/passwd',
      b'root:x:0:0:root:/:/bin/false\n'
      b'user:x:1000:1000:root:/home:/bin/false\n'
      b'nobody:x:65534:65534:nobody:/nonexistent:/bin/false')
    root.write('/etc/group',
      b'root:x:0:\n'
      b'user:x:1000:\n'
      b'nobody:x:65534:')

    # Mountpoints for libraries
    root.mkdir(RUBY_ROOT)
    root.mkdir(PYTHON_ROOT)
    root.mkdir(JAVA_ROOT)
    root.mkdir(HASKELL_ROOT)
    root.mkdir(DOTNET_ROOT)
    root.mkdir(JS_ROOT)

    # Other miscellaneous mountpoints
    root.mkdir('/dev/')
    root.mkdir('/proc/')
    root.mkdir('/home/')
    root.symlink('/dev/stdin', '/proc/self/fd/0')
    root.symlink('/dev/stdout', '/proc/self/fd/1')
    root.symlink('/dev/stderr', '/proc/self/fd/2')
    root.mkdir('/mnt/stdio')

    # Java wants to see which CPUs are online
    root.write('/sys/devices/system/cpu/online', b'0')

    # cgroups support
    root.mkdir('/sys/fs/cgroup/memory/omegajail')

    # Node.js really wants a source of randomness.
    root.symlink('/dev/urandom', os.path.join(JS_ROOT, 'urandom'))

    # Device nodes
    root.mknod('/dev/null', mode=0o666|stat.S_IFCHR, device=os.makedev(1, 3))
    root.mknod('/dev/zero', mode=0o666|stat.S_IFCHR, device=os.makedev(1, 5))

    root.symlink('/usr/bin/java',
            [x for x in JAVA_FILES if x.endswith('bin/java')][0])
    root.symlink('/usr/bin/python', os.path.join(PYTHON_ROOT, 'python'))
    root.symlink('/usr/bin/node', os.path.join(JS_ROOT, 'bin/node'))
    root.symlink('/usr/lib/node_modules', os.path.join(JS_ROOT, 'node_modules'))
    for f in RUBY_FILES:
        if f.startswith(RUBY_ROOT): continue
        root.symlink(f, os.path.join(RUBY_ROOT, f.replace('/', '_')))

  with Chroot(os.path.join(args.target, 'root'), '/', link=args.link) as root:
    install_common(root)

    for filename in resolver.files_for(ROOT_PACKAGES):
        root.copyfromhost(filename)

    # /tmp is an (optional) mountpoint in the normal chroot, and
    # will be left read-only for the programs that don't need it.
    root.mkdir('/tmp/')

    root.symlink('/usr/bin/lua', 'lua5.2')

  with Chroot(os.path.join(args.target, 'root-compilers'), '/', link=args.link) as root:
    install_common(root)

    for f in resolver.files_for(COMPILER_PACKAGES):
        if os.path.islink(f):
            root.symlink(f, os.readlink(f))
        else:
            root.copyfromhost(f)

    root.copyfromhost('/usr/bin/fpc')
    root.copyfromhost('/etc/fpc.cfg')
    if os.path.exists('/usr/bin/ppcarm'):
      root.copyfromhost('/usr/bin/ppcarm')
    else:
      root.copyfromhost('/usr/bin/ppcx64')
    root.symlink('/usr/bin/javac',
            [x for x in JAVA_FILES if  x.endswith('bin/javac')][0])
    for f in HASKELL_FILES:
        if f.startswith(HASKELL_ROOT): continue
        if root.file_exists(f): continue
        root.symlink(f, os.path.join(HASKELL_ROOT, f.replace('/', '_')))
    root.symlink('/usr/lib/haskell-packages', os.path.join(HASKELL_ROOT, 'haskell-packages'))
    root.mkdir('/tmp/')

    root.symlink('/usr/bin/luac', 'luac5.2')

  with Chroot(os.path.join(args.target, 'root-openjdk'), JAVA_ROOT, link=args.link) as root:
    for filename in JAVA_FILES:
        root.copyfromhost(filename)

  with Chroot(os.path.join(args.target, 'root-python'), PYTHON_ROOT, link=args.link) as root:
    root.install(os.path.join(PYTHON_ROOT, 'python'), '/usr/bin/python2.7')
    for filename in PYTHON_FILES:
        if filename.startswith(PYTHON_ROOT):
            root.copyfromhost(filename)

    with RemoteFile(
            'https://raw.githubusercontent.com/omegaup/libkarel/master/libkarel.py',
            '9b67427877bb8ba5bbf3bbde9dcf828c81d3f2cd') as f:
        root.install('/usr/lib/python2.7/libkarel.py', f.path)

  with Chroot(os.path.join(args.target, 'root-ruby'), RUBY_ROOT, link=args.link) as root:
    root.install(os.path.join(RUBY_ROOT, 'ruby'), '/usr/bin/ruby')
    for filename in RUBY_FILES:
        if filename.startswith(RUBY_ROOT):
            root.copyfromhost(filename)
    for f in RUBY_FILES:
        if f.startswith(RUBY_ROOT): continue
        root.install(os.path.join(RUBY_ROOT, f.replace('/', '_')), f)

  with Chroot(os.path.join(args.target, 'root-hs'), HASKELL_ROOT, link=args.link) as root:
    for filename in HASKELL_FILES:
        if filename.startswith(HASKELL_ROOT):
            root.copyfromhost(filename)
    for f in HASKELL_FILES:
        if f.startswith(HASKELL_ROOT): continue
        root.install(os.path.join(HASKELL_ROOT, f.replace('/', '_')), f)
    root.copyfromhost('/usr/lib/haskell-packages', relative_to='/usr/lib/')

  with Chroot(os.path.join(args.target, 'root-dotnet'), DOTNET_ROOT, link=args.link) as root:
    for filename in DOTNET_FILES:
        if filename.startswith(DOTNET_ROOT):
            root.copyfromhost(filename)
    root.copyfromhost('/usr/share/dotnet/ref', relative_to=DOTNET_ROOT)
    root.copyfromhost('/usr/share/dotnet/Release.rsp', relative_to=DOTNET_ROOT)
    root.write(os.path.join(DOTNET_ROOT, 'Main.runtimeconfig.json'),
               b'{"runtimeOptions": {'
               b'"tfm": "netcoreapp2.0", '
               b'"framework":{"name":"Microsoft.NETCore.App","version":"2.0.0"}}'
               b'}')

  with Chroot(os.path.join(args.target, 'root-js'), JS_ROOT) as root:
    root.extract('https://nodejs.org/dist/v6.11.3/node-v6.11.3-linux-x64.tar.xz',
                 'ffb03a2f2c4caefe6ce6c535598a3a299ca4a5a7',
                 skip_prefix='node-v6.11.3-linux-x64/',
		 include=[os.path.join(JS_ROOT, 'LICENSE'),
                          os.path.join(JS_ROOT, 'bin/node')])
    with RemoteFile(
            'https://github.com/omegaup/karel.js/releases/download/v0.2.1/karel.js',
            'e5aecd4a305aaaf810df6b5d038d2535fd52d857') as f:
        root.install(os.path.join(JS_ROOT, 'karel.js'), f.path)

    random.seed(b'\u03A9\u1F512') # Ω🔒
    root.write(os.path.join(JS_ROOT, 'urandom'),
               bytes(random.randint(0, 255) for _ in range(4096)))

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Build a chroot environment for omegajail')
  parser.add_argument('--target', default='/var/lib/omegajail',
                      help='The directory in which the chroot environment will '
                      'be built')
  parser.add_argument('--no-link', dest='link', action='store_false',
                      help='Copy instead of linking files')
  parser.add_argument('command', nargs=argparse.REMAINDER)
  args = parser.parse_args()
  sys.exit(main(args))

# vim: set expandtab:ts=2:sw=2
