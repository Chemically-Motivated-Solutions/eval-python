#!/usr/bin/python3

import argparse
import logging
import os
import os.path
import shutil
import subprocess
import sys

try:
  from shlex import quote
except ImportError:
  from pipes import quote

LANGUAGES = ('c', 'cpp', 'hs', 'java', 'pas', 'py', 'rb', 'lua', 'cs')
ROOT = '/var/lib/omegajail'

def check_call(args):
  try:
    subprocess.check_call(list(args))
  except subprocess.CalledProcessError as e:
    logging.error('Failed to run \'%s\'',
                  ' '.join(quote(arg) for arg in args))

def omegajail_compile(lang, strace):
  if os.path.isdir(lang):
    shutil.rmtree(lang, True)
  os.makedirs(lang)
  target = 'Main.%s' % lang
  os.link('sumas.' + lang, os.path.join(lang, target))
  if strace:
    args = [
        'strace', '-f', '-o', os.path.join(lang, 'strace-compiler.txt'),
        '-s', '512',
        '../omegajail',
        '--sigsys-detector=none']
  else:
    args = ['../omegajail']

  args += [
      '-C', os.path.join(ROOT, 'root-compilers'),
      '-d', '/home',
      '-b', lang + ',/home,1',
      '-1', os.path.abspath(os.path.join(lang, 'compile.out')),
      '-2', os.path.abspath(os.path.join(lang, 'compile.err')),
      '-M', os.path.abspath(os.path.join(lang, 'compile.meta')),
      '-t', '3000',
      '-O', '10485100']
  if lang == 'c':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/gcc'),
      '--', '/usr/bin/gcc', '-o', 'Main', '-O2'])
  elif lang == 'cpp':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/gcc'),
      '--', '/usr/bin/g++', '--std=c++11', '-o', 'Main', '-O2'])
  elif lang == 'hs':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/ghc'),
      '-b', os.path.join(ROOT, 'root-hs') + ',/usr/lib/ghc',
      '--', '/usr/lib/ghc/bin/ghc', '-B/usr/lib/ghc', '-O2', '-o', 'Main'])
  elif lang == 'java':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/javac'),
      '-b', os.path.join(ROOT, 'root-openjdk') + ',/usr/lib/jvm',
      '--', '/usr/bin/javac', '-J-Xmx512M'])
  elif lang == 'pas':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/fpc'),
      '--', '/usr/bin/fpc', '-Tlinux', '-O2'])
  elif lang == 'py':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/pyc'),
      '-b', os.path.join(ROOT, 'root-python') + ',/usr/lib/python2.7',
      '--', '/usr/bin/python', '-m', 'py_compile'])
  elif lang == 'rb':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/ruby'),
      '-b', os.path.join(ROOT, 'root-ruby') + ',/usr/lib/ruby',
      '--', '/usr/bin/ruby', '-wc'])
  elif lang == 'lua':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/lua'),
      '--', '/usr/bin/luac', '-o', 'Main'])
  elif lang == 'cs':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/csc'),
      '-b', os.path.join(ROOT, 'root-dotnet') + ',/usr/share/dotnet',
      '--', '/usr/share/dotnet/dotnet',
      '/usr/share/dotnet/sdk/2.0.0/Roslyn/csc.exe', '/noconfig',
      '@/usr/share/dotnet/Release.rsp', '/out:Main.dll', '/target:exe'])
  check_call(args + [target])

def omegajail_run(lang, strace):
  if strace:
    args = [
        'strace', '-f', '-o', os.path.join(lang, 'strace-main.txt'),
        '-s', '512',
        '../omegajail',
        '--sigsys-detector=none']
  else:
    args = ['../omegajail']

  memory_limit = str(256 * 1024 * 1024)
  args += [
      '-C', os.path.join(ROOT, 'root'),
      '-d', '/home',
      '-b', os.path.abspath(lang) + ',/home',
      '-0', os.path.abspath('input'),
      '-1', os.path.abspath(os.path.join(lang, 'run.out')),
      '-2', os.path.abspath(os.path.join(lang, 'run.err')),
      '-M', os.path.abspath(os.path.join(lang, 'run.meta')),
      '-t', '3000',
      '-w', '3000',
      '-O', '1048510']
  if lang in ('c', 'cpp'):
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/cpp'),
      '-m', memory_limit,
      '--', './Main'])
  elif lang == 'hs':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/hs'),
      '-b', os.path.join(ROOT, 'root-hs') + ',/usr/lib/ghc',
      '-m', memory_limit,
      '--', './Main'])
  elif lang == 'java':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/java'),
      '-b', os.path.join(ROOT, 'root-openjdk') + ',/usr/lib/jvm',
      '--', '/usr/bin/java', '-Xmx268435456', 'Main'])
  elif lang == 'pas':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/pas'),
      '-m', memory_limit,
      '--', './Main'])
  elif lang == 'py':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/py'),
      '-b', os.path.join(ROOT, 'root-python') + ',/usr/lib/python2.7',
      '-m', memory_limit,
      '--', '/usr/bin/python', 'Main.py'])
  elif lang == 'rb':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/ruby'),
      '-b', os.path.join(ROOT, 'root-ruby') + ',/usr/lib/ruby',
      '-m', memory_limit,
      '--', '/usr/bin/ruby', 'Main.rb'])
  elif lang == 'lua':
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/lua'),
      '-m', memory_limit,
      '--', '/usr/bin/lua', 'Main'])
  elif lang == 'cs':
    os.symlink('/usr/share/dotnet/Main.runtimeconfig.json',
               os.path.join(os.path.abspath(lang), 'Main.runtimeconfig.json'))
    args.extend([
      '-S', os.path.join(ROOT, 'scripts/cs'),
      '-b', os.path.join(ROOT, 'root-dotnet') + ',/usr/share/dotnet',
      '--cgroup-memory-limit', memory_limit,
      '--', '/usr/share/dotnet/dotnet', 'Main.dll'])
  check_call(args)
  with open(os.path.join(lang, 'run.out'), 'r') as f:
    got = f.read().strip()
  with open('output', 'r') as f:
    expected = f.read().strip()
  return got == expected

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--languages', type=str)
  parser.add_argument('--strace', action='store_true')
  args = parser.parse_args()

  languages = LANGUAGES
  if args.languages:
      languages = args.languages.split(',')

  for lang in languages:
    print('%-20s' % lang, end='')
    omegajail_compile(lang, args.strace)
    if omegajail_run(lang, args.strace):
      print('OK')
    else:
      print('ERROR')
  return 0

if __name__ == '__main__':
  sys.exit(main())

# vim: set expandtab:ts=2:sw=2
