#!/usr/bin/python3
"""Runs omegajail smoke tests"""

import argparse
import logging
import os
import os.path
import shlex
import shutil
import subprocess
import sys

from typing import List

_LANGUAGES = [
    'c',
    'c11-gcc',
    'c11-clang',
    'cpp',
    'cpp03-gcc',
    'cpp03-clang',
    'cpp11',
    'cpp11-gcc',
    'cpp11-clang',
    'cpp17-gcc',
    'cpp17-clang',
    'cpp20-gcc',
    'cpp20-clang',
    'hs',
    'java',
    'kt',
    'pas',
    'py',
    'py2',
    'py3',
    'rb',
    'lua',
    'rs',
    'go',
    'js',
    'kj',
    'kp',
    'cs',
]
_EXTENSIONS = {
    'c11-gcc': 'c',
    'c11-clang': 'c',
    'cpp03-gcc': 'cpp',
    'cpp03-clang': 'cpp',
    'cpp11': 'cpp',
    'cpp11-gcc': 'cpp',
    'cpp11-clang': 'cpp',
    'cpp17-gcc': 'cpp',
    'cpp17-clang': 'cpp',
    'cpp20-gcc': 'cpp',
    'cpp20-clang': 'cpp',
    'py2': 'py',
    'py3': 'py',
}
_KAREL_LANGUAGES = set(['kj', 'kp'])
_PWD = os.path.abspath(os.path.dirname(__file__))


def _check_call(args: List[str]) -> bool:
    try:
        logging.debug('calling \'%s\'', ' '.join(
            shlex.quote(arg) for arg in args))
        subprocess.check_call(args, cwd=_PWD)
        return True
    except subprocess.CalledProcessError:
        logging.error('Failed to run \'%s\'', ' '.join(
            shlex.quote(arg) for arg in args))
        return False


def _omegajail_compile(
    root: str,
    lang: str,
    strace: bool,
    cgroup_path: str,
) -> bool:
    lang_dir = os.path.join(_PWD, 'run', lang)
    if os.path.isdir(lang_dir):
        shutil.rmtree(lang_dir, True)
    os.makedirs(lang_dir)
    target = 'Main'
    source = '{}.{}'.format(target, _EXTENSIONS.get(lang, lang))
    os.link(
        os.path.join(_PWD, 'sumas.{}'.format(lang)),
        os.path.join(lang_dir, source))
    if strace:
        args = [
            'strace', '-f', '-o',
            os.path.join(lang_dir, 'strace-compiler.txt'), '-s', '512',
            os.path.join(root, 'bin/omegajail'),
        ]
    else:
        args = [os.path.join(root, 'bin/omegajail')]

    args += [
        '--homedir',
        lang_dir,
        '--homedir-writable',
        '-1',
        os.path.join(lang_dir, 'compile.out'),
        '-2',
        os.path.join(lang_dir, 'compile.err'),
        '-M',
        os.path.join(lang_dir, 'compile.meta'),
        '-t',
        '30000',
        '-O',
        '10485100',
        '--root',
        root,
        '--compile',
        lang,
        '--compile-source',
        source,
        '--compile-target',
        target,
        '--cgroup-path',
        cgroup_path,
    ]
    if lang == 'cs':
        os.symlink('/usr/share/dotnet/Main.runtimeconfig.json',
                   os.path.join(lang_dir, 'Main.runtimeconfig.json'))
    return _check_call(args)


def _omegajail_run(
    root: str,
    lang: str,
    strace: bool,
    input_path: str,
    output_path: str,
    cgroup_path: str,
) -> bool:
    lang_dir = os.path.join(_PWD, 'run', lang)
    if strace:
        args = [
            'strace', '-f', '-o',
            os.path.join(lang_dir, 'strace-main.txt'), '-s', '512',
            os.path.join(root, 'bin/omegajail'),
        ]
    else:
        args = [os.path.join(root, 'bin/omegajail')]

    args += [
        '--homedir',
        lang_dir,
        '-0',
        os.path.join(_PWD, input_path),
        '-1',
        os.path.join(lang_dir, 'run.out'),
        '-2',
        os.path.join(lang_dir, 'run.err'),
        '-M',
        os.path.join(lang_dir, 'run.meta'),
        '-t',
        '3000',
        '-w',
        '3000',
        '-O',
        '1048510',
        '-m',
        str(256 * 1024 * 1024),
        '--root',
        root,
        '--run',
        lang,
        '--cgroup-path',
        cgroup_path,
        '--run-target',
        'Main',
    ]
    if not _check_call(args):
        return False
    with open(os.path.join(lang_dir, 'run.out'), 'r') as run_out:
        got = run_out.read().strip()
    with open(os.path.join(_PWD, output_path), 'r') as output:
        expected = output.read().strip()
    if got != expected:
        logging.error('Wrong answer when running \'%s\'. got %r, expected %r',
                      lang, got, expected)
    return got == expected


def _main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('--languages', type=str)
    parser.add_argument('--strace', action='store_true')
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--root', default='/var/lib/omegajail', type=str)
    parser.add_argument('--cgroup-path',
                        default='/omegajail',
                        type=str)
    args = parser.parse_args()

    # Set this process up for cgroups v2, since it uses slightly different
    # rules.
    if os.path.isdir(os.path.join('/sys/fs/cgroup', args.cgroup_path[1:])):
        smoketest_cgroup = os.path.join('/sys/fs/cgroup', args.cgroup_path[1:],
                                        'smoketest')
        if not os.path.isdir(smoketest_cgroup):
            with open(
                    os.path.join('/sys/fs/cgroup', args.cgroup_path[1:],
                                 'cgroup.subtree_control'), 'w') as f:
                f.write('+memory')
            os.makedirs(smoketest_cgroup, exist_ok=True)
            with open(os.path.join(smoketest_cgroup, 'cgroup.controllers'),
                      'w') as f:
                f.write('+memory')
        with open(os.path.join(smoketest_cgroup, 'cgroup.procs'), 'w') as f:
            f.write(str(os.getpid()))

    args.root = os.path.abspath(args.root)

    languages = _LANGUAGES
    if args.languages:
        languages = args.languages.split(',')

    if args.verbose:
        logging.getLogger().setLevel('DEBUG')

    passed = True

    for lang in languages:
        print('%-20s' % lang, end='')
        if not _omegajail_compile(
                root=args.root,
                lang=lang,
                strace=args.strace,
                cgroup_path=args.cgroup_path,
        ):
            print('ERROR (COMPILE)')
            passed = False
            continue
        if lang in _KAREL_LANGUAGES:
            input_path, output_path = 'input-karel', 'output-karel'
        else:
            input_path, output_path = 'input', 'output'
        if _omegajail_run(
                root=args.root,
                lang=lang,
                strace=args.strace,
                input_path=input_path,
                output_path=output_path,
                cgroup_path=args.cgroup_path,
        ):
            print('OK')
        else:
            print('ERROR')
            passed = False

    if not passed:
        sys.exit(1)


if __name__ == '__main__':
    _main()
